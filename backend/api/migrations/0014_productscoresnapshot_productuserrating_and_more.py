# Generated by Django 4.2.7 on 2025-09-30 03:04

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
from django.utils.text import slugify
import django.db.models.deletion
def normalize_store_chains(apps, schema_editor):
    Store = apps.get_model('api', 'Store')
    replacements = {'countdown': 'woolworths', "woolworths": 'woolworths', "pak'n save": 'paknsave'}
    for store in Store.objects.all():
        chain = (getattr(store, 'chain', '') or '').strip().lower()
        normalized = replacements.get(chain, chain)
        if normalized != chain:
            store.chain = normalized
            store.save(update_fields=['chain'])


def populate_product_slugs(apps, schema_editor):
    Product = apps.get_model('api', 'Product')
    for product in Product.objects.all():
        if getattr(product, 'slug', None):
            continue
        base_parts = [part for part in [getattr(product, 'brand', None), getattr(product, 'name', None), f"{product.weight_grams}g" if getattr(product, 'weight_grams', None) else None] if part]
        base = slugify(' '.join(base_parts))
        if not base:
            base = slugify(getattr(product, 'name', '') or '') or slugify(getattr(product, 'brand', '') or '') or f'product-{product.pk}'
        slug_candidate = base or f'product-{product.pk}'
        suffix = 1
        while Product.objects.filter(slug=slug_candidate).exclude(pk=product.pk).exists():
            suffix += 1
            slug_candidate = f"{base}-{suffix}"
        product.slug = slug_candidate
        product.save(update_fields=['slug'])



class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('api', '0013_brand'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProductScoreSnapshot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_score', models.DecimalField(decimal_places=1, default=Decimal('0.0'), max_digits=4)),
                ('affordability_score', models.DecimalField(decimal_places=1, default=Decimal('0.0'), max_digits=4)),
                ('fat_quality_score', models.DecimalField(decimal_places=1, default=Decimal('0.0'), max_digits=4)),
                ('recipe_friendly_score', models.DecimalField(decimal_places=1, default=Decimal('0.0'), max_digits=4)),
                ('affordability_note', models.TextField(blank=True)),
                ('fat_water_note', models.TextField(blank=True)),
                ('recipe_note', models.TextField(blank=True)),
                ('healthy_swap_note', models.TextField(blank=True)),
                ('pairs_well_with', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Product Score Snapshot',
                'verbose_name_plural': 'Product Score Snapshots',
            },
        ),
        migrations.CreateModel(
            name='ProductUserRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_score', models.DecimalField(decimal_places=1, max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('cost_score', models.DecimalField(decimal_places=1, max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('texture_score', models.DecimalField(decimal_places=1, max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('recipe_score', models.DecimalField(decimal_places=1, max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('comment', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.RemoveConstraint(
            model_name='store',
            name='store_chain_valid',
        ),
        migrations.AddField(
            model_name='nutritionprofile',
            name='calories_kcal',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='Optional calories per serving override', max_digits=6, null=True),
        ),
        migrations.AddField(
            model_name='nutritionprofile',
            name='water_g',
            field=models.DecimalField(decimal_places=2, default=Decimal('0.0'), max_digits=6),
        ),
        migrations.AddField(
            model_name='product',
            name='category',
            field=models.CharField(choices=[('block', 'Block'), ('spreadable', 'Spreadable'), ('tub', 'Tub')], default='block', help_text='Presentation format used in the app', max_length=20),
        ),
        migrations.AddField(
            model_name='product',
            name='healthy_alternatives',
            field=models.ManyToManyField(blank=True, help_text='Suggested healthier swaps', related_name='healthy_alternative_for', to='api.product'),
        ),
        migrations.AddField(
            model_name='product',
            name='is_healthy_option',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='product',
            name='nutrition_profile',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product', to='api.nutritionprofile'),
        ),
        migrations.AddField(
            model_name='product',
            name='serving_size_g',
            field=models.PositiveIntegerField(default=10, help_text='Default serving size (grams) for calorie equivalence'),
        ),
        migrations.AddField(
            model_name='product',
            name='slug',
            field=models.SlugField(blank=True, max_length=150),
        ),
        migrations.RunPython(populate_product_slugs),
        migrations.AddField(
            model_name='product',
            name='versatility_tags',
            field=models.JSONField(blank=True, default=list, help_text='Recipe or usage tags surfaced to the user'),
        ),
        migrations.RunPython(normalize_store_chains),
        migrations.AddConstraint(
            model_name='store',
            constraint=models.CheckConstraint(check=models.Q(('chain__in', ['paknsave', 'woolworths', 'new_world'])), name='store_chain_valid'),
        ),
        migrations.AlterField(
            model_name='product',
            name='slug',
            field=models.SlugField(blank=True, max_length=150, unique=True),
        ),
        migrations.AddField(
            model_name='productuserrating',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_ratings', to='api.product'),
        ),
        migrations.AddField(
            model_name='productuserrating',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_ratings', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='productscoresnapshot',
            name='product',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='score_snapshot', to='api.product'),
        ),
        migrations.AlterUniqueTogether(
            name='productuserrating',
            unique_together={('product', 'user')},
        ),
    ]
